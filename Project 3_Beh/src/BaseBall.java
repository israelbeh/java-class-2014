/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.text.DecimalFormat;
import java.util.Random;
import javax.swing.JList;
/**
 *
 * @author Israel Beh
 * Description: The program allows each team in each conference to play each other 
 * four times. Then each team will play the other teams in the other conferences
 * two times. The teams are displayed in order of wins. the top three teams play 
 * in the play off. They each play each other three times. The team with the most wins
 * within the play off is determined Champion.
 * 
 */
public class BaseBall extends javax.swing.JFrame {

    /**
     * Creates new form BaseBall
     */
    public BaseBall() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PnlWTeams = new javax.swing.JPanel();
        LblWest = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        LstWest = new javax.swing.JList();
        PnlETeams = new javax.swing.JPanel();
        LblEast = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        LstEast = new javax.swing.JList();
        PnlCTeams = new javax.swing.JPanel();
        LblCentral = new javax.swing.JLabel();
        SPnlCentral = new javax.swing.JScrollPane();
        LstCentral = new javax.swing.JList();
        PnlWRecord = new javax.swing.JPanel();
        LblWRecord = new javax.swing.JLabel();
        LblwFirst = new javax.swing.JLabel();
        LblwSec = new javax.swing.JLabel();
        LblwThird = new javax.swing.JLabel();
        LblwFourth = new javax.swing.JLabel();
        LblwLast = new javax.swing.JLabel();
        LblWWins = new javax.swing.JLabel();
        LblWLoss = new javax.swing.JLabel();
        LblWPct = new javax.swing.JLabel();
        LblwFirstW = new javax.swing.JLabel();
        LblwSecW = new javax.swing.JLabel();
        LblwThirdW = new javax.swing.JLabel();
        LblwFourthW = new javax.swing.JLabel();
        LblwLastW = new javax.swing.JLabel();
        LblwFirstL = new javax.swing.JLabel();
        LblwSecL = new javax.swing.JLabel();
        LblwThirdL = new javax.swing.JLabel();
        LblwFourthL = new javax.swing.JLabel();
        LblwLastL = new javax.swing.JLabel();
        LblwFirstP = new javax.swing.JLabel();
        LblwSecP = new javax.swing.JLabel();
        LblwThirdP = new javax.swing.JLabel();
        LblwFourthP = new javax.swing.JLabel();
        LblwLastP = new javax.swing.JLabel();
        PnlERecord = new javax.swing.JPanel();
        LblERecord = new javax.swing.JLabel();
        LblEWin = new javax.swing.JLabel();
        LblELoss = new javax.swing.JLabel();
        LblEPct = new javax.swing.JLabel();
        LbleFirst = new javax.swing.JLabel();
        LbleSec = new javax.swing.JLabel();
        LbleThird = new javax.swing.JLabel();
        LbleFourth = new javax.swing.JLabel();
        LbleLast = new javax.swing.JLabel();
        LbleFirstW = new javax.swing.JLabel();
        LbleSecW = new javax.swing.JLabel();
        LbleThirdW = new javax.swing.JLabel();
        LbleFourthW = new javax.swing.JLabel();
        LbleLastW = new javax.swing.JLabel();
        LbleFirstL = new javax.swing.JLabel();
        LbleSecL = new javax.swing.JLabel();
        LbleThirdL = new javax.swing.JLabel();
        LbleFourthL = new javax.swing.JLabel();
        LbleLastL = new javax.swing.JLabel();
        LbleFirstP = new javax.swing.JLabel();
        LbleSecP = new javax.swing.JLabel();
        LbleThirdP = new javax.swing.JLabel();
        LbleFourthP = new javax.swing.JLabel();
        LbleLastP = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        LblCRecord = new javax.swing.JLabel();
        LblCWin = new javax.swing.JLabel();
        LblCLoss = new javax.swing.JLabel();
        LblCPct = new javax.swing.JLabel();
        LblcFirst = new javax.swing.JLabel();
        LblcSec = new javax.swing.JLabel();
        LblcFourth = new javax.swing.JLabel();
        LblcThird = new javax.swing.JLabel();
        LblcLast = new javax.swing.JLabel();
        LblcFirstW = new javax.swing.JLabel();
        LblcSecW = new javax.swing.JLabel();
        LblcThirdW = new javax.swing.JLabel();
        LblcFourthW = new javax.swing.JLabel();
        LblcLastW = new javax.swing.JLabel();
        LblcFirstL = new javax.swing.JLabel();
        LblcSecL = new javax.swing.JLabel();
        LblcThirdL = new javax.swing.JLabel();
        LblcFourthL = new javax.swing.JLabel();
        LblcLastL = new javax.swing.JLabel();
        LblcFirstP = new javax.swing.JLabel();
        LblcSecP = new javax.swing.JLabel();
        LblcThirdP = new javax.swing.JLabel();
        LblcFourthP = new javax.swing.JLabel();
        LblcLastP = new javax.swing.JLabel();
        BtnPlay = new javax.swing.JButton();
        BtnReset = new javax.swing.JButton();
        BtnQuit = new javax.swing.JButton();
        ChkBxHT = new javax.swing.JCheckBox();
        PnlChamp = new javax.swing.JPanel();
        LblChamp = new javax.swing.JLabel();
        LblTeamChamp = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PnlWTeams.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PnlWTeams.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LblWest.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        LblWest.setText("West");
        PnlWTeams.add(LblWest, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 7, -1, -1));

        LstWest.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Diamondbacks", "Dodgers", "Giants", "Padres", "Rockies" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(LstWest);

        PnlWTeams.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 120, 80));

        getContentPane().add(PnlWTeams, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 160, 170));

        PnlETeams.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PnlETeams.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LblEast.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        LblEast.setText("East");
        PnlETeams.add(LblEast, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 7, -1, -1));

        LstEast.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Braves", "Marlins", "Mets", "Nationals", "Phillies" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(LstEast);

        PnlETeams.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 120, 80));

        getContentPane().add(PnlETeams, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 160, 170));

        PnlCTeams.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        LblCentral.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        LblCentral.setText("Central");

        LstCentral.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Brewers", "Cardinals", "Cubs", "Pirates", "Reds" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        SPnlCentral.setViewportView(LstCentral);

        javax.swing.GroupLayout PnlCTeamsLayout = new javax.swing.GroupLayout(PnlCTeams);
        PnlCTeams.setLayout(PnlCTeamsLayout);
        PnlCTeamsLayout.setHorizontalGroup(
            PnlCTeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnlCTeamsLayout.createSequentialGroup()
                .addGroup(PnlCTeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PnlCTeamsLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(LblCentral))
                    .addGroup(PnlCTeamsLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(SPnlCentral, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        PnlCTeamsLayout.setVerticalGroup(
            PnlCTeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnlCTeamsLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(LblCentral)
                .addGap(17, 17, 17)
                .addComponent(SPnlCentral, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(PnlCTeams, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 160, 170));

        PnlWRecord.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PnlWRecord.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LblWRecord.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        LblWRecord.setText("Record");
        PnlWRecord.add(LblWRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 7, -1, -1));
        PnlWRecord.add(LblwFirst, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 41, -1, -1));
        PnlWRecord.add(LblwSec, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 67, -1, -1));
        PnlWRecord.add(LblwThird, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 89, -1, -1));
        PnlWRecord.add(LblwFourth, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 111, -1, -1));
        PnlWRecord.add(LblwLast, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 133, -1, -1));

        LblWWins.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LblWWins.setText("Wins");
        PnlWRecord.add(LblWWins, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 7, -1, -1));

        LblWLoss.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LblWLoss.setText("Losses");
        PnlWRecord.add(LblWLoss, new org.netbeans.lib.awtextra.AbsoluteConstraints(206, 7, -1, -1));

        LblWPct.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LblWPct.setText("Pct");
        PnlWRecord.add(LblWPct, new org.netbeans.lib.awtextra.AbsoluteConstraints(286, 7, -1, -1));
        PnlWRecord.add(LblwFirstW, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 41, 30, 20));
        PnlWRecord.add(LblwSecW, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 67, 40, 20));
        PnlWRecord.add(LblwThirdW, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 89, -1, -1));
        PnlWRecord.add(LblwFourthW, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 111, -1, -1));
        PnlWRecord.add(LblwLastW, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 133, -1, -1));
        PnlWRecord.add(LblwFirstL, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 43, -1, -1));
        PnlWRecord.add(LblwSecL, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 67, -1, -1));
        PnlWRecord.add(LblwThirdL, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 89, -1, -1));
        PnlWRecord.add(LblwFourthL, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 111, -1, -1));
        PnlWRecord.add(LblwLastL, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 133, -1, -1));
        PnlWRecord.add(LblwFirstP, new org.netbeans.lib.awtextra.AbsoluteConstraints(278, 41, -1, -1));
        PnlWRecord.add(LblwSecP, new org.netbeans.lib.awtextra.AbsoluteConstraints(278, 67, -1, -1));
        PnlWRecord.add(LblwThirdP, new org.netbeans.lib.awtextra.AbsoluteConstraints(278, 89, -1, -1));
        PnlWRecord.add(LblwFourthP, new org.netbeans.lib.awtextra.AbsoluteConstraints(278, 111, -1, -1));
        PnlWRecord.add(LblwLastP, new org.netbeans.lib.awtextra.AbsoluteConstraints(278, 133, -1, -1));

        getContentPane().add(PnlWRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 370, 170));

        PnlERecord.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PnlERecord.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LblERecord.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        LblERecord.setText("Record");
        PnlERecord.add(LblERecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 7, -1, -1));

        LblEWin.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LblEWin.setText("Wins");
        PnlERecord.add(LblEWin, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 7, -1, -1));

        LblELoss.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LblELoss.setText("Losses");
        PnlERecord.add(LblELoss, new org.netbeans.lib.awtextra.AbsoluteConstraints(204, 7, -1, -1));

        LblEPct.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LblEPct.setText("Pct");
        PnlERecord.add(LblEPct, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, -1, -1));
        PnlERecord.add(LbleFirst, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 40, -1, -1));
        PnlERecord.add(LbleSec, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 62, -1, -1));
        PnlERecord.add(LbleThird, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 85, -1, -1));
        PnlERecord.add(LbleFourth, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 109, -1, -1));
        PnlERecord.add(LbleLast, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 138, -1, -1));
        PnlERecord.add(LbleFirstW, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 41, -1, -1));
        PnlERecord.add(LbleSecW, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 62, -1, -1));
        PnlERecord.add(LbleThirdW, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 85, -1, -1));
        PnlERecord.add(LbleFourthW, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 110, -1, -1));
        PnlERecord.add(LbleLastW, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 138, -1, -1));
        PnlERecord.add(LbleFirstL, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 41, -1, -1));
        PnlERecord.add(LbleSecL, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 63, -1, -1));
        PnlERecord.add(LbleThirdL, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 86, -1, -1));
        PnlERecord.add(LbleFourthL, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 109, -1, -1));
        PnlERecord.add(LbleLastL, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 138, -1, -1));
        PnlERecord.add(LbleFirstP, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 44, -1, -1));
        PnlERecord.add(LbleSecP, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 65, -1, -1));
        PnlERecord.add(LbleThirdP, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 87, -1, -1));
        PnlERecord.add(LbleFourthP, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 109, -1, -1));
        PnlERecord.add(LbleLastP, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 137, -1, -1));

        getContentPane().add(PnlERecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 370, 170));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        LblCRecord.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        LblCRecord.setText("Record");

        LblCWin.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LblCWin.setText("Wins");

        LblCLoss.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LblCLoss.setText("Losses");

        LblCPct.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LblCPct.setText("Pct");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LblCRecord)
                    .addComponent(LblcFirst)
                    .addComponent(LblcSec)
                    .addComponent(LblcLast)
                    .addComponent(LblcFourth)
                    .addComponent(LblcThird))
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LblCWin)
                    .addComponent(LblcFirstW)
                    .addComponent(LblcSecW)
                    .addComponent(LblcThirdW)
                    .addComponent(LblcFourthW)
                    .addComponent(LblcLastW))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LblCLoss)
                    .addComponent(LblcFirstL)
                    .addComponent(LblcSecL)
                    .addComponent(LblcThirdL)
                    .addComponent(LblcFourthL)
                    .addComponent(LblcLastL))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LblcFirstP)
                    .addComponent(LblCPct)
                    .addComponent(LblcSecP)
                    .addComponent(LblcThirdP)
                    .addComponent(LblcFourthP)
                    .addComponent(LblcLastP))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblCRecord)
                    .addComponent(LblCWin)
                    .addComponent(LblCLoss)
                    .addComponent(LblCPct))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblcFirst)
                    .addComponent(LblcFirstW)
                    .addComponent(LblcFirstL)
                    .addComponent(LblcFirstP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblcSec)
                    .addComponent(LblcSecW)
                    .addComponent(LblcSecL)
                    .addComponent(LblcSecP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblcThird)
                    .addComponent(LblcThirdW)
                    .addComponent(LblcThirdL)
                    .addComponent(LblcThirdP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblcFourth)
                    .addComponent(LblcFourthW)
                    .addComponent(LblcFourthL)
                    .addComponent(LblcFourthP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblcLast)
                    .addComponent(LblcLastW)
                    .addComponent(LblcLastL)
                    .addComponent(LblcLastP))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 390, 370, 170));

        BtnPlay.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        BtnPlay.setText("Play");
        BtnPlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnPlayMouseClicked(evt);
            }
        });
        getContentPane().add(BtnPlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 50, -1, -1));

        BtnReset.setText("Reset");
        BtnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnResetMouseClicked(evt);
            }
        });
        getContentPane().add(BtnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 100, -1, -1));

        BtnQuit.setText("Quit");
        BtnQuit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnQuitMouseClicked(evt);
            }
        });
        getContentPane().add(BtnQuit, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 150, -1, -1));

        ChkBxHT.setText("Home Team (+1)");
        ChkBxHT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkBxHTActionPerformed(evt);
            }
        });
        getContentPane().add(ChkBxHT, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 200, -1, -1));

        PnlChamp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        LblChamp.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LblChamp.setText("Champion");

        LblTeamChamp.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N

        javax.swing.GroupLayout PnlChampLayout = new javax.swing.GroupLayout(PnlChamp);
        PnlChamp.setLayout(PnlChampLayout);
        PnlChampLayout.setHorizontalGroup(
            PnlChampLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnlChampLayout.createSequentialGroup()
                .addGroup(PnlChampLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PnlChampLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(LblChamp))
                    .addGroup(PnlChampLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(LblTeamChamp, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        PnlChampLayout.setVerticalGroup(
            PnlChampLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnlChampLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LblChamp)
                .addGap(78, 78, 78)
                .addComponent(LblTeamChamp, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        getContentPane().add(PnlChamp, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 330, 200, 220));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnQuitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnQuitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_BtnQuitMouseClicked

    private void BtnResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnResetMouseClicked
            LbleFirst.setText(null);
            LbleFirstW.setText(null);
            LbleFirstL.setText(null);
            LbleFirstP.setText(null);
            
            LbleSec.setText(null);
            LbleSecW.setText(null);
            LbleSecL.setText(null);
            LbleSecP.setText(null);
            
            LbleThird.setText(null);
            LbleThirdW.setText(null);
            LbleThirdL.setText(null);
            LbleThirdP.setText(null);
            
            LbleFourth.setText(null);
            LbleFourthW.setText(null);
            LbleFourthL.setText(null);
            LbleFourthP.setText(null);
            
            LbleLast.setText(null);
            LbleLastW.setText(null);
            LbleLastL.setText(null);
            LbleLastP.setText(null);
            
            LblcFirst.setText(null);
            LblcFirstW.setText(null);
            LblcFirstL.setText(null);
            LblcFirstP.setText(null);
            
            LblcSec.setText(null);
            LblcSecW.setText(null);
            LblcSecL.setText(null);
            LblcSecP.setText(null);
            
            LblcThird.setText(null);
            LblcThirdW.setText(null);
            LblcThirdL.setText(null);
            LblcThirdP.setText(null);
            
            LblcFourth.setText(null);
            LblcFourthW.setText(null);
            LblcFourthL.setText(null);
            LblcFourthP.setText(null);
            
            LblcLast.setText(null);
            LblcLastW.setText(null);
            LblcLastL.setText(null);
            LblcLastP.setText(null);
            
            LblwFirst.setText(null);
            LblwFirstW.setText(null);
            LblwFirstL.setText(null);
            LblwFirstP.setText(null);
            
            LblwSec.setText(null);
            LblwSecW.setText(null);
            LblwSecL.setText(null);
            LblwSecP.setText(null);
            
            LblwThird.setText(null);
            LblwThirdW.setText(null);
            LblwThirdL.setText(null);
            LblwThirdP.setText(null);
            
            LblwFourth.setText(null);
            LblwFourthW.setText(null);
            LblwFourthL.setText(null);
            LblwFourthP.setText(null);
            
            LblwLast.setText(null);
            LblwLastW.setText(null);
            LblwLastL.setText(null);
            LblwLastP.setText(null);
            
            
            
            
    }//GEN-LAST:event_BtnResetMouseClicked

    private void ChkBxHTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkBxHTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkBxHTActionPerformed

    private void BtnPlayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnPlayMouseClicked
        int iCount;
        
        Team[] aoWest = new Team[LstWest.getModel().getSize()]; //creates an array for west  
        for (iCount=0; iCount < aoWest.length; iCount++)//sets the team name for each array
        { 
           LstWest.setSelectedIndex(iCount);
           aoWest[iCount] = new Team(LstWest.getSelectedValue().toString());
           
         
        }
        
        Team aoEast[] = new Team[LstEast.getModel().getSize()];
        for (iCount=0; iCount < aoEast.length; iCount++)
        { 
           LstEast.setSelectedIndex(iCount);
           aoEast[iCount] = new Team(LstEast.getSelectedValue().toString());
          
        } 
        
        Team aoCentral[] = new Team[LstCentral.getModel().getSize()];
        for (iCount=0; iCount < aoCentral.length; iCount++)
        { 
           LstCentral.setSelectedIndex(iCount);
           aoCentral[iCount] = new Team(LstCentral.getSelectedValue().toString());
           
        }
        
        Random NumGen = new Random();
      //West Conference
        for (iCount = 0; iCount < 2; iCount++)// allows teams to play each other four times
        {
            int iHome;
            int iAway;
      
               
            for (iHome = 0; iHome < aoWest.length; iHome++)// Home team plays away team
            {
                
                for(iAway=0; iAway < aoWest.length; iAway++) //allows each team to be away team
                    {
                         
                        int iHomeScore = 0;
                        int iAwayScore = 0;
           
                        if (iHome != iAway)// doesnt allow the team to play themself
                        {
                            iHomeScore = NumGen.nextInt(3);
                            iAwayScore = NumGen.nextInt(3);
                            while (iHomeScore == iAwayScore)
                            {
                               iHomeScore = NumGen.nextInt(3);
                               iAwayScore = NumGen.nextInt(3); 
                            }
                            if (ChkBxHT.isSelected() == true)//add a one run advantage if checked
                            {
                                iHomeScore++;
                            }
                            if (iHomeScore > iAwayScore)
                            {
                               
                                aoWest[iHome].Wins++;
                                aoWest[iAway].Losses++;
                                
                            }
                            else 
                            {
                                
                                aoWest[iAway].Wins++;
                                aoWest[iHome].Losses++;
                                
                            }
                           
                           
                        }
                    } 
                
                }
            
            }
        //East Conference
        for (iCount = 0; iCount < 2; iCount++)
        {
            int iHome;
            int iAway;
            int iGame =0;
               
            for (iHome = 0; iHome < aoEast.length; iHome++)
            {
                iGame++;
                for(iAway = 0; iAway < aoEast.length; iAway++)
                    {
                        
                        int iHomeScore;
                        int iAwayScore;
                        if (iHome != iAway)
                        {
                            iHomeScore = NumGen.nextInt(3);
                            iAwayScore = NumGen.nextInt(3);
                            
                            while (iHomeScore == iAwayScore)
                            {
                               iHomeScore = NumGen.nextInt(3);
                               iAwayScore = NumGen.nextInt(3); 
                            }
                            
                            if (ChkBxHT.isSelected() == true)
                            {
                                iHomeScore++;
                            }
                            if (iHomeScore > iAwayScore)
                            {
                                
                                aoEast[iHome].Wins++;
                                aoEast[iAway].Losses++;
                                
                            }
                            else
                            {
                                
                                aoEast[iAway].Wins++;
                                aoEast[iHome].Losses++;
                                
                            }

                        }
                         
                    } 
                
                }
            
            }
        //Central Conference
        for (iCount = 0; iCount < 2; iCount++)
        {
            int iHome;
            int iAway;
            
               
            for (iHome = 0; iHome < aoCentral.length; iHome++)
            {
                for(iAway = 0; iAway < aoCentral.length; iAway++)
                    {
                        int iHomeScore = 0;
                        int iAwayScore = 0;
             
                        
                        if (iHome != iAway)
                        {
                            iHomeScore = NumGen.nextInt(3);
                            iAwayScore = NumGen.nextInt(3);
                            while (iHomeScore == iAwayScore)
                            {
                               iHomeScore = NumGen.nextInt(3);
                               iAwayScore = NumGen.nextInt(3); 
                            }
                            if (ChkBxHT.isSelected() == true)
                            {
                                iHomeScore++;
                            }
                            
                            if (iHomeScore > iAwayScore)
                            {
                                
                                aoCentral[iHome].Wins++;
                                aoCentral[iAway].Losses++;
                                
                            }
                            else if (iHomeScore < iAwayScore)
                            {
                                
                                aoCentral[iAway].Wins++;
                                aoCentral[iHome].Losses++;
                                
                            }
                        
                        }
                       
                    } 
                
                }
            
            
         }
        int iWest;
        int iCentral;
        int iWestScore;
        int iEastScore;
        int iCentralScore;
        int iEast;
        
        //Non-conference games
        for (iCount = 0; iCount < 2; iCount++)//plays each team twice
        {
            
            for (iWest = 0; iWest < aoWest.length; iWest ++)//west conference plays east
            {
               
                for (iEast = 0; iEast < aoEast.length; iEast++)
                {
                    
                    iWestScore = NumGen.nextInt(3);
                    iEastScore = NumGen.nextInt(3);
                    while (iWestScore == iEastScore)
                    {
                    iWestScore = NumGen.nextInt(3);
                    iEastScore = NumGen.nextInt(3); 
                    }
                    if (iWestScore > iEastScore)
                    {
                       
                        aoWest[iWest].Wins++;
                        aoEast[iEast].Losses++;
                    }
                    else if(iWestScore < iEastScore)
                    {
                        
                        aoEast[iEast].Wins++;
                        aoWest[iWest].Losses++;
                    }
                    
                }
                
            }    
        }
        for (iCount = 0; iCount < 2; iCount++)
            {
                for (iWest = 0; iWest < aoWest.length; iWest ++)
                { 
                    
                    for (iCentral = 0; iCentral < aoCentral.length; iCentral++)
                        {
                            iWestScore = NumGen.nextInt(3);
                            iCentralScore = NumGen.nextInt(3);
                            while (iWestScore == iCentralScore)
                            {
                            iWestScore = NumGen.nextInt(3);
                            iCentralScore = NumGen.nextInt(3); 
                            }
                            if (iWestScore > iCentralScore)
                            {
                               
                                aoWest[iWest].Wins++;
                                aoCentral[iCentral].Losses++;
                            }
                            else if(iWestScore < iCentralScore)
                            {
                                
                                aoCentral[iCentral].Wins++;
                                aoWest[iWest].Losses++;
                            }
                            
                        }
                }
            }
        
        
        for (iCount = 0; iCount < 2; iCount++)
        {
            for (iEast = 0; iEast < aoEast.length; iEast++)
            {
                
                for (iCentral = 0; iCentral < aoCentral.length; iCentral++)
                {
                    iCentralScore = NumGen.nextInt(3);
                    iEastScore = NumGen.nextInt(3);
                    while (iCentralScore == iEastScore)
                    {
                    iCentralScore = NumGen.nextInt(3);
                    iEastScore = NumGen.nextInt(3); 
                    }
                    if (iCentralScore > iEastScore)
                    {
                        
                        aoCentral[iCentral].Wins++;
                        aoEast[iEast].Losses++;
                    }
                    else if(iCentralScore < iEastScore)
                    {
                       
                        aoEast[iEast].Wins++;
                        aoCentral[iCentral].Losses++;
                    }
                    
                }
            }                
        } 
        //Sort East Conference
        int a,b;
        Team c;
        for(a = 0; a < aoEast.length; a++)
        {
            for (b = aoEast.length-1;b > a; b--)
            {
                if(aoEast[b-1].Wins < aoEast[b].Wins)
                {
                    c= aoEast[b-1];
                    aoEast[b-1] = aoEast[b];
                    aoEast[b] = c;
                }
            }
        }
        
                            
        //Display East Conference
        DecimalFormat dFormat = new DecimalFormat(".000");
       
            LbleFirst.setText((aoEast[0].TeamName));
            LbleFirstW.setText(String.valueOf(aoEast[0].Wins));
            LbleFirstL.setText(String.valueOf(aoEast[0].Losses));
            LbleFirstP.setText(String.valueOf(dFormat.format(aoEast[0].getWinLoss())));
            
            LbleSec.setText((aoEast[1].TeamName));
            LbleSecW.setText(String.valueOf(aoEast[1].Wins));
            LbleSecL.setText(String.valueOf(aoEast[1].Losses));
            LbleSecP.setText(String.valueOf(dFormat.format(aoEast[1].getWinLoss())));
            
            LbleThird.setText((aoEast[2].TeamName));
            LbleThirdW.setText(String.valueOf(aoEast[2].Wins));
            LbleThirdL.setText(String.valueOf(aoEast[2].Losses));
            LbleThirdP.setText(String.valueOf(dFormat.format(aoEast[2].getWinLoss())));
            
            LbleFourth.setText((aoEast[3].TeamName));
            LbleFourthW.setText(String.valueOf(aoEast[3].Wins));
            LbleFourthL.setText(String.valueOf(aoEast[3].Losses));
            LbleFourthP.setText(String.valueOf(dFormat.format(aoEast[3].getWinLoss())));
            
            LbleLast.setText((aoEast[4].TeamName));
            LbleLastW.setText(String.valueOf(aoEast[4].Wins));
            LbleLastL.setText(String.valueOf(aoEast[4].Losses));
            LbleLastP.setText(String.valueOf(dFormat.format(aoEast[4].getWinLoss())));
            
        //Sort Central Conference
        for(a = 1; a < aoCentral.length; a++)
        {
            for (b = aoCentral.length-1;b >= a; b--)
            {
                if(aoCentral[b-1].Wins < aoCentral[b].Wins)
                {
                    c=aoCentral[b-1];
                    aoCentral[b-1] = aoCentral[b];
                    aoCentral[b] = c;
                }
            }
        }
        //Display Central Conference
            LblcFirst.setText((aoCentral[0].TeamName));
            LblcFirstW.setText(String.valueOf(aoCentral[0].Wins));
            LblcFirstL.setText(String.valueOf(aoCentral[0].Losses));
            LblcFirstP.setText(String.valueOf(dFormat.format(aoCentral[0].getWinLoss())));
            
            LblcSec.setText((aoCentral[1].TeamName));
            LblcSecW.setText(String.valueOf(aoCentral[1].Wins));
            LblcSecL.setText(String.valueOf(aoCentral[1].Losses));
            LblcSecP.setText(String.valueOf(dFormat.format(aoCentral[1].getWinLoss())));
            
            LblcThird.setText((aoCentral[2].TeamName));
            LblcThirdW.setText(String.valueOf(aoCentral[2].Wins));
            LblcThirdL.setText(String.valueOf(aoCentral[2].Losses));
            LblcThirdP.setText(String.valueOf(dFormat.format(aoCentral[2].getWinLoss())));
            
            LblcFourth.setText((aoCentral[3].TeamName));
            LblcFourthW.setText(String.valueOf(aoCentral[3].Wins));
            LblcFourthL.setText(String.valueOf(aoCentral[3].Losses));
            LblcFourthP.setText(String.valueOf(dFormat.format(aoCentral[3].getWinLoss())));
            
            LblcLast.setText((aoCentral[4].TeamName));
            LblcLastW.setText(String.valueOf(aoCentral[4].Wins));
            LblcLastL.setText(String.valueOf(aoCentral[4].Losses));
            LblcLastP.setText(String.valueOf(dFormat.format(aoCentral[4].getWinLoss())));
            
        //Sort West Conference
        for(a = 1; a < aoWest.length; a++)
        {
            for (b = aoWest.length-1;b >= a; b--)
            {
                if(aoWest[b-1].Wins < aoWest[b].Wins)
                {
                    c=aoWest[b-1];
                    aoWest[b-1] = aoWest[b];
                    aoWest[b]= c;
                }
            }
        }
        //Display the West Conference
            LblwFirst.setText((aoWest[0].TeamName));
            LblwFirstW.setText(String.valueOf(aoWest[0].Wins));
            LblwFirstL.setText(String.valueOf(aoWest[0].Losses));
            LblwFirstP.setText(String.valueOf(dFormat.format(aoWest[0].getWinLoss())));
            
            LblwSec.setText((aoWest[1].TeamName));
            LblwSecW.setText(String.valueOf(aoWest[1].Wins));
            LblwSecL.setText(String.valueOf(aoWest[1].Losses));
            LblwSecP.setText(String.valueOf(dFormat.format(aoWest[1].getWinLoss())));
            
            LblwThird.setText((aoWest[2].TeamName));
            LblwThirdW.setText(String.valueOf(aoWest[2].Wins));
            LblwThirdL.setText(String.valueOf(aoWest[2].Losses));
            LblwThirdP.setText(String.valueOf(dFormat.format(aoWest[2].getWinLoss())));
            
            LblwFourth.setText((aoWest[3].TeamName));
            LblwFourthW.setText(String.valueOf(aoWest[3].Wins));
            LblwFourthL.setText(String.valueOf(aoWest[3].Losses));
            LblwFourthP.setText(String.valueOf(dFormat.format(aoWest[3].getWinLoss())));
            
            LblwLast.setText((aoWest[4].TeamName));
            LblwLastW.setText(String.valueOf(aoWest[4].Wins));
            LblwLastL.setText(String.valueOf(aoWest[4].Losses));
            LblwLastP.setText(String.valueOf(dFormat.format(aoEast[4].getWinLoss())));
        
        //West plays East in playoff                         
       for (iCount=0; iCount < 3; iCount++)
        {
          int iWScore = NumGen.nextInt(3);
          int iEScore = NumGen.nextInt(3);
          while(iWScore == iEScore)
          {
              iWScore = NumGen.nextInt(3);
              iEScore = NumGen.nextInt(3);
          }
          
          if (iWScore > iEScore)
          {
              aoWest[0].PlayoffWins++;//uses a separate win variable for the play offs
              aoEast[0].PlayoffLosses++;
          }
          else
          {
              aoWest[0].PlayoffLosses++;
              aoEast[0].PlayoffWins++;
          }
        }
       
       //West plays Central in playoff
        for (iCount=0; iCount < 3; iCount++)
        {
          int iWScore = NumGen.nextInt(3);
          int iCScore = NumGen.nextInt(3);
          while(iWScore == iCScore)
          {
              iWScore = NumGen.nextInt(3);
              iCScore = NumGen.nextInt(3);
          }
          
          if (iWScore > iCScore)
          {
              aoWest[0].PlayoffWins++;
              aoCentral[0].PlayoffLosses++;
          }
          else
          {
              aoWest[0].PlayoffLosses++;
              aoCentral[0].PlayoffWins++;
          }
        }
        
        //East plays Central in Play off
        for (iCount=0; iCount < 3; iCount++)
        {
          int iCScore = NumGen.nextInt(3);
          int iEScore = NumGen.nextInt(3);
          while(iCScore == iEScore)
          {
              iCScore = NumGen.nextInt(3);
              iEScore = NumGen.nextInt(3);
          }
          
          if (iCScore > iEScore)
          {
              aoCentral[0].PlayoffWins++;
              aoEast[0].PlayoffLosses++;
          }
          else
          {
              aoCentral[0].PlayoffLosses++;
              aoEast[0].PlayoffWins++;
          }
        }
       
         //Who is the Champion?
         if (aoWest[0].PlayoffWins > aoEast[0].PlayoffWins && aoWest[0].PlayoffWins > aoCentral[0].PlayoffWins)
         {
             LblTeamChamp.setText(String.valueOf(aoWest[0].TeamName));
         }
         else if (aoEast[0].PlayoffWins > aoWest[0].PlayoffWins && aoEast[0].PlayoffWins > aoCentral[0].PlayoffWins)
         {
             LblTeamChamp.setText(String.valueOf(aoEast[0].TeamName));
         }
         else
         {
             LblTeamChamp.setText(String.valueOf(aoCentral[0].TeamName));
         }
       
    }//GEN-LAST:event_BtnPlayMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BaseBall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BaseBall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BaseBall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseBall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BaseBall().setVisible(true);
            }
        });
    }
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnPlay;
    private javax.swing.JButton BtnQuit;
    private javax.swing.JButton BtnReset;
    private javax.swing.JCheckBox ChkBxHT;
    private javax.swing.JLabel LblCLoss;
    private javax.swing.JLabel LblCPct;
    private javax.swing.JLabel LblCRecord;
    private javax.swing.JLabel LblCWin;
    private javax.swing.JLabel LblCentral;
    private javax.swing.JLabel LblChamp;
    private javax.swing.JLabel LblELoss;
    private javax.swing.JLabel LblEPct;
    private javax.swing.JLabel LblERecord;
    private javax.swing.JLabel LblEWin;
    private javax.swing.JLabel LblEast;
    private javax.swing.JLabel LblTeamChamp;
    private javax.swing.JLabel LblWLoss;
    private javax.swing.JLabel LblWPct;
    private javax.swing.JLabel LblWRecord;
    private javax.swing.JLabel LblWWins;
    private javax.swing.JLabel LblWest;
    private javax.swing.JLabel LblcFirst;
    private javax.swing.JLabel LblcFirstL;
    private javax.swing.JLabel LblcFirstP;
    private javax.swing.JLabel LblcFirstW;
    private javax.swing.JLabel LblcFourth;
    private javax.swing.JLabel LblcFourthL;
    private javax.swing.JLabel LblcFourthP;
    private javax.swing.JLabel LblcFourthW;
    private javax.swing.JLabel LblcLast;
    private javax.swing.JLabel LblcLastL;
    private javax.swing.JLabel LblcLastP;
    private javax.swing.JLabel LblcLastW;
    private javax.swing.JLabel LblcSec;
    private javax.swing.JLabel LblcSecL;
    private javax.swing.JLabel LblcSecP;
    private javax.swing.JLabel LblcSecW;
    private javax.swing.JLabel LblcThird;
    private javax.swing.JLabel LblcThirdL;
    private javax.swing.JLabel LblcThirdP;
    private javax.swing.JLabel LblcThirdW;
    private javax.swing.JLabel LbleFirst;
    private javax.swing.JLabel LbleFirstL;
    private javax.swing.JLabel LbleFirstP;
    private javax.swing.JLabel LbleFirstW;
    private javax.swing.JLabel LbleFourth;
    private javax.swing.JLabel LbleFourthL;
    private javax.swing.JLabel LbleFourthP;
    private javax.swing.JLabel LbleFourthW;
    private javax.swing.JLabel LbleLast;
    private javax.swing.JLabel LbleLastL;
    private javax.swing.JLabel LbleLastP;
    private javax.swing.JLabel LbleLastW;
    private javax.swing.JLabel LbleSec;
    private javax.swing.JLabel LbleSecL;
    private javax.swing.JLabel LbleSecP;
    private javax.swing.JLabel LbleSecW;
    private javax.swing.JLabel LbleThird;
    private javax.swing.JLabel LbleThirdL;
    private javax.swing.JLabel LbleThirdP;
    private javax.swing.JLabel LbleThirdW;
    private javax.swing.JLabel LblwFirst;
    private javax.swing.JLabel LblwFirstL;
    private javax.swing.JLabel LblwFirstP;
    private javax.swing.JLabel LblwFirstW;
    private javax.swing.JLabel LblwFourth;
    private javax.swing.JLabel LblwFourthL;
    private javax.swing.JLabel LblwFourthP;
    private javax.swing.JLabel LblwFourthW;
    private javax.swing.JLabel LblwLast;
    private javax.swing.JLabel LblwLastL;
    private javax.swing.JLabel LblwLastP;
    private javax.swing.JLabel LblwLastW;
    private javax.swing.JLabel LblwSec;
    private javax.swing.JLabel LblwSecL;
    private javax.swing.JLabel LblwSecP;
    private javax.swing.JLabel LblwSecW;
    private javax.swing.JLabel LblwThird;
    private javax.swing.JLabel LblwThirdL;
    private javax.swing.JLabel LblwThirdP;
    private javax.swing.JLabel LblwThirdW;
    private javax.swing.JList LstCentral;
    private javax.swing.JList LstEast;
    private javax.swing.JList LstWest;
    private javax.swing.JPanel PnlCTeams;
    private javax.swing.JPanel PnlChamp;
    private javax.swing.JPanel PnlERecord;
    private javax.swing.JPanel PnlETeams;
    private javax.swing.JPanel PnlWRecord;
    private javax.swing.JPanel PnlWTeams;
    private javax.swing.JScrollPane SPnlCentral;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}


